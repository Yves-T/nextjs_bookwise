generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum borrow_status {
  BORROWED
  RETURNED
}

enum role {
  USER
  ADMIN
}

enum status {
  PENDING
  APPROVED
  REJECTED
}

    // id: uuid("id").notNull().primaryKey().defaultRandom().unique(),
model User {
  id Int @id @default(autoincrement())
  fullName String @db.VarChar(200)
  email String @unique
  universityId Int @unique
  password String
  universityCard String
  status status
  role role
  lastActivityDate DateTime @default(now())
  createdAt DateTime @default(now()) @db.Timestamptz()
  borrowed Borrow[]
}

model Book {
  id String @id @default(uuid())
  title String @db.VarChar(255)
  author String @db.VarChar(255)
  genre String
  rating Int
  coverUrl String @map("cover_url")
  coverColor String @db.VarChar(7)  @map("cover_color")
  description String
  totalCopies Int @map("total_copies") @default(1)
  availableCopies Int @map("available_copies") @default(0)
  videoUrl String @map("video_url")
  summary String 
  borrowed Borrow[]
  createdAt DateTime @default(now()) @db.Timestamptz()
}

model Borrow {
  id String @id @default(uuid()) 
  user User @relation(fields: [userId], references: [id])
  userId Int
  book Book @relation(fields: [bookId], references: [id])
  bookId String
  borrowDate  DateTime @default(now()) @db.Timestamptz()
  dueDate DateTime
  returnDate DateTime?
  status borrow_status
  createdAt DateTime @default(now()) @db.Timestamptz()
}